import {
  require_jquery
} from "./chunk-OASG4FMR.js";
import {
  __toModule
} from "./chunk-HV27UI33.js";

// node_modules/metismenu/dist/metisMenu.esm.js
var import_jquery = __toModule(require_jquery());
var Util = (($2) => {
  const TRANSITION_END = "transitionend";
  const Util2 = {
    TRANSITION_END: "mmTransitionEnd",
    triggerTransitionEnd(element) {
      $2(element).trigger(TRANSITION_END);
    },
    supportsTransitionEnd() {
      return Boolean(TRANSITION_END);
    }
  };
  function getSpecialTransitionEndEvent() {
    return {
      bindType: TRANSITION_END,
      delegateType: TRANSITION_END,
      handle(event) {
        if ($2(event.target).is(this)) {
          return event.handleObj.handler.apply(this, arguments);
        }
        return void 0;
      }
    };
  }
  function transitionEndEmulator(duration) {
    let called = false;
    $2(this).one(Util2.TRANSITION_END, () => {
      called = true;
    });
    setTimeout(() => {
      if (!called) {
        Util2.triggerTransitionEnd(this);
      }
    }, duration);
    return this;
  }
  function setTransitionEndSupport() {
    $2.fn.mmEmulateTransitionEnd = transitionEndEmulator;
    $2.event.special[Util2.TRANSITION_END] = getSpecialTransitionEndEvent();
  }
  setTransitionEndSupport();
  return Util2;
})(import_jquery.default);
var NAME = "metisMenu";
var DATA_KEY = "metisMenu";
var EVENT_KEY = `.${DATA_KEY}`;
var DATA_API_KEY = ".data-api";
var JQUERY_NO_CONFLICT = import_jquery.default.fn[NAME];
var TRANSITION_DURATION = 350;
var Default = {
  toggle: true,
  preventDefault: true,
  triggerElement: "a",
  parentTrigger: "li",
  subMenu: "ul"
};
var Event = {
  SHOW: `show${EVENT_KEY}`,
  SHOWN: `shown${EVENT_KEY}`,
  HIDE: `hide${EVENT_KEY}`,
  HIDDEN: `hidden${EVENT_KEY}`,
  CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`
};
var ClassName = {
  METIS: "metismenu",
  ACTIVE: "mm-active",
  SHOW: "mm-show",
  COLLAPSE: "mm-collapse",
  COLLAPSING: "mm-collapsing",
  COLLAPSED: "mm-collapsed"
};
var MetisMenu = class {
  constructor(element, config) {
    this.element = element;
    this.config = {
      ...Default,
      ...config
    };
    this.transitioning = null;
    this.init();
  }
  init() {
    const self = this;
    const conf = this.config;
    const el = (0, import_jquery.default)(this.element);
    el.addClass(ClassName.METIS);
    el.find(`${conf.parentTrigger}.${ClassName.ACTIVE}`).children(conf.triggerElement).attr("aria-expanded", "true");
    el.find(`${conf.parentTrigger}.${ClassName.ACTIVE}`).parents(conf.parentTrigger).addClass(ClassName.ACTIVE);
    el.find(`${conf.parentTrigger}.${ClassName.ACTIVE}`).parents(conf.parentTrigger).children(conf.triggerElement).attr("aria-expanded", "true");
    el.find(`${conf.parentTrigger}.${ClassName.ACTIVE}`).has(conf.subMenu).children(conf.subMenu).addClass(`${ClassName.COLLAPSE} ${ClassName.SHOW}`);
    el.find(conf.parentTrigger).not(`.${ClassName.ACTIVE}`).has(conf.subMenu).children(conf.subMenu).addClass(ClassName.COLLAPSE);
    el.find(conf.parentTrigger).children(conf.triggerElement).on(Event.CLICK_DATA_API, function(e) {
      const eTar = (0, import_jquery.default)(this);
      if (eTar.attr("aria-disabled") === "true") {
        return;
      }
      if (conf.preventDefault && eTar.attr("href") === "#") {
        e.preventDefault();
      }
      const paRent = eTar.parent(conf.parentTrigger);
      const sibLi = paRent.siblings(conf.parentTrigger);
      const sibTrigger = sibLi.children(conf.triggerElement);
      if (paRent.hasClass(ClassName.ACTIVE)) {
        eTar.attr("aria-expanded", "false");
        self.removeActive(paRent);
      } else {
        eTar.attr("aria-expanded", "true");
        self.setActive(paRent);
        if (conf.toggle) {
          self.removeActive(sibLi);
          sibTrigger.attr("aria-expanded", "false");
        }
      }
      if (conf.onTransitionStart) {
        conf.onTransitionStart(e);
      }
    });
  }
  setActive(li) {
    (0, import_jquery.default)(li).addClass(ClassName.ACTIVE);
    const ul = (0, import_jquery.default)(li).children(this.config.subMenu);
    if (ul.length > 0 && !ul.hasClass(ClassName.SHOW)) {
      this.show(ul);
    }
  }
  removeActive(li) {
    (0, import_jquery.default)(li).removeClass(ClassName.ACTIVE);
    const ul = (0, import_jquery.default)(li).children(`${this.config.subMenu}.${ClassName.SHOW}`);
    if (ul.length > 0) {
      this.hide(ul);
    }
  }
  show(element) {
    if (this.transitioning || (0, import_jquery.default)(element).hasClass(ClassName.COLLAPSING)) {
      return;
    }
    const elem = (0, import_jquery.default)(element);
    const startEvent = import_jquery.default.Event(Event.SHOW);
    elem.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) {
      return;
    }
    elem.parent(this.config.parentTrigger).addClass(ClassName.ACTIVE);
    if (this.config.toggle) {
      const toggleElem = elem.parent(this.config.parentTrigger).siblings().children(`${this.config.subMenu}.${ClassName.SHOW}`);
      this.hide(toggleElem);
    }
    elem.removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING).height(0);
    this.setTransitioning(true);
    const complete = () => {
      if (!this.config || !this.element) {
        return;
      }
      elem.removeClass(ClassName.COLLAPSING).addClass(`${ClassName.COLLAPSE} ${ClassName.SHOW}`).height("");
      this.setTransitioning(false);
      elem.trigger(Event.SHOWN);
    };
    elem.height(element[0].scrollHeight).one(Util.TRANSITION_END, complete).mmEmulateTransitionEnd(TRANSITION_DURATION);
  }
  hide(element) {
    if (this.transitioning || !(0, import_jquery.default)(element).hasClass(ClassName.SHOW)) {
      return;
    }
    const elem = (0, import_jquery.default)(element);
    const startEvent = import_jquery.default.Event(Event.HIDE);
    elem.trigger(startEvent);
    if (startEvent.isDefaultPrevented()) {
      return;
    }
    elem.parent(this.config.parentTrigger).removeClass(ClassName.ACTIVE);
    elem.height(elem.height())[0].offsetHeight;
    elem.addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);
    this.setTransitioning(true);
    const complete = () => {
      if (!this.config || !this.element) {
        return;
      }
      if (this.transitioning && this.config.onTransitionEnd) {
        this.config.onTransitionEnd();
      }
      this.setTransitioning(false);
      elem.trigger(Event.HIDDEN);
      elem.removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE);
    };
    if (elem.height() === 0 || elem.css("display") === "none") {
      complete();
    } else {
      elem.height(0).one(Util.TRANSITION_END, complete).mmEmulateTransitionEnd(TRANSITION_DURATION);
    }
  }
  setTransitioning(isTransitioning) {
    this.transitioning = isTransitioning;
  }
  dispose() {
    import_jquery.default.removeData(this.element, DATA_KEY);
    (0, import_jquery.default)(this.element).find(this.config.parentTrigger).children(this.config.triggerElement).off(Event.CLICK_DATA_API);
    this.transitioning = null;
    this.config = null;
    this.element = null;
  }
  static jQueryInterface(config) {
    return this.each(function() {
      const $this = (0, import_jquery.default)(this);
      let data = $this.data(DATA_KEY);
      const conf = {
        ...Default,
        ...$this.data(),
        ...typeof config === "object" && config ? config : {}
      };
      if (!data) {
        data = new MetisMenu(this, conf);
        $this.data(DATA_KEY, data);
      }
      if (typeof config === "string") {
        if (data[config] === void 0) {
          throw new Error(`No method named "${config}"`);
        }
        data[config]();
      }
    });
  }
};
import_jquery.default.fn[NAME] = MetisMenu.jQueryInterface;
import_jquery.default.fn[NAME].Constructor = MetisMenu;
import_jquery.default.fn[NAME].noConflict = () => {
  import_jquery.default.fn[NAME] = JQUERY_NO_CONFLICT;
  return MetisMenu.jQueryInterface;
};
var metisMenu_esm_default = MetisMenu;

// dep:metismenu
var metismenu_default = metisMenu_esm_default;
export {
  metismenu_default as default
};
/*!
* metismenu https://github.com/onokumus/metismenu#readme
* A collapsible jQuery menu plugin
* @version 3.0.7
* @author Osman Nuri Okumus <onokumus@gmail.com> (https://github.com/onokumus)
* @license: MIT 
*/
//# sourceMappingURL=metismenu.js.map
